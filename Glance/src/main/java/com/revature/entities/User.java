package com.revature.entities;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;

import org.springframework.stereotype.Component;

import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


/**
 * Represents a user within the Glance application necessary for its basic functionality. Contains necessary information for API functionality including identity verification.
 * @author Kyle Castillo
 *
 */
@Data @NoArgsConstructor 
@Entity @Table(name="users")
@Component
public class User {
	
	/**
	 * Id is an autogenerated value that identifies a user in a more concise manner than their email address for referencing within the application.
	 */
	@Id @Column(name="user_id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	/**
	 * Email address of the user. Used to login to the application.
	 */
	@NotEmpty
	@Column(nullable=false, unique=true)
	private String email;
	
	/**
	 * The user's password. The BCrypr library is used to encrypt this value for added security.
	 */
	@NotEmpty
	@Column(nullable=false)
	private @Getter @Setter String password;
	
	/**
	 * The user's full, legal first name.
	 */
	@NotEmpty
	@Column(nullable=false, name="first_name")
	private @Getter @Setter String firstName;
	
	/**
	 * The user's legal last name.
	 */
	@NotEmpty
	@Column(nullable=false, name="last_name")
	private @Getter @Setter String lastName;
	
	/**
	 * The users phone number. Used for identity verification by certain financial institutions.
	 */
	@NotEmpty
	@Column(nullable=false)
	private @Getter @Setter String cellphone;
	
	/**
	 * The user's physical address. Used for identity verification by certain financial institutions.
	 */
	@NotEmpty
	@Column(nullable=false, name="main_address")
	private @Getter @Setter String mainAddress;
	
	/**
	 * An alternative address for a user. May be used as a mailing address or to hold a foreign address where relevant.
	 */
	@Column(name="alt_address")
	private @Getter @Setter String altAddress;
	
	/**
	 * A list of accounts owned by this user.
	 */
	@OneToMany(mappedBy="user", fetch = FetchType.LAZY)
	private @Getter List<Account> accounts;
	
	/**
	 * The day the user created their account.
	 */
	@Column(name="creation_date")
	private @Getter Date creationDate;
	
	/**
	 * Primary constructor for the User entity.<br>
	 * This includes all necessary fields needed to create a user.
	 * @param email the email the user signs up with, this must be unique.
	 * @param password the password the user uses to log in.
	 * @param firstName the first name of the user.
	 * @param lastName the last name of the user.
	 * @param cellphone the cellphone number of the user.
	 * @param mainAddress the primary addresss of the user
	 */
	public User(@NotEmpty String email, @NotEmpty String password, @NotEmpty String firstName, @NotEmpty String lastName,
			@NotEmpty String cellphone, @NotEmpty String mainAddress) {
		super();
		this.email = email;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.cellphone = cellphone;
		this.mainAddress = mainAddress;
		this.creationDate = new Date(); 
	}
	
	/**
	 * Constructor used to instantiate all fields that are not auto generated.
	 * @param email the email the user signs up with, this must be unique.
	 * @param firstName the first name of the user.
	 * @param lastName the last name of the user.
	 * @param cellphone the cellphone number of the user.
	 * @param mainAddress the primary address of the user.
	 * @param altAddress an alternate address of the user.
	 * @param plaidToken the plaid token associated with the user.
	 * @param plaidItem the plaid item associated with the user.
	 */
	public User(@NotEmpty String email, @NotEmpty String password, @NotEmpty String firstName, @NotEmpty String lastName,
			@NotEmpty String cellphone, @NotEmpty String mainAddress, String altAddress) {
		super();
		this.email = email;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.cellphone = cellphone;
		this.mainAddress = mainAddress;
		this.altAddress = altAddress;
		this.creationDate = new Date();
	}	
}
